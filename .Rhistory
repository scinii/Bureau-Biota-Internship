pc <- prcomp(normal_data, center= TRUE, scale. = TRUE)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6)
pc <- prcomp(normal_data, center= TRUE, scale. = TRUE)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6)
eigen(Sigma)
9.31/10.93
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6)
seq(from = 0, to = 20, by = 100)
seq(from = 0, to = 20, by = 1)
seq(from = 0, to = 20, by = 0.5)
summary(pc)
library(fpp3)
library(MASS)
library(ggfortify)
set.seed(42)
n <- 1000
mu <- c(10, 10) # mean set to 0 for PCA
Sigma <- matrix(c(4.33, 3.68, 3.68, 6.60), 2, 2)
x <- mvrnorm(n, mu, Sigma)
normal_data <- as.data.frame(x)
colnames(normal_data) <- c("X1", "X2")
eigen$slopes[1] <- eigen$vectors[1,1]/eigen$vectors[2,1]  # calc slopes as ratios
library(fpp3)
library(MASS)
library(ggfortify)
set.seed(42)
n <- 1000
mu <- c(10, 10) # mean set to 0 for PCA
Sigma <- matrix(c(4.33, 3.68, 3.68, 6.60), 2, 2)
x <- mvrnorm(n, mu, Sigma)
normal_data <- as.data.frame(x)
colnames(normal_data) <- c("X1", "X2")
eigen <- eigen(Sigma)
eigen$slopes[1] <- eigen$vectors[1,1]/eigen$vectors[2,1]  # calc slopes as ratios
eigen$slopes[2] <- eigen$vectors[1,1]/eigen$vectors[1,2]  # calc slopes as ratios
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6)
+ geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "green")  # plot pc1
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "green") +  # plot pc1
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red")  # plot pc2
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "green") +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "green")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 10, slope = eigen$slopes[1], colour = "green")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 10, slope = eigen$slopes[1], colour = "green") +  geom_abline(intercept = 10, slope = eigen$slopes[2], colour = "red")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 10, slope = eigen$slopes[1], colour = "green") +
geom_abline(intercept = 10, slope = eigen$slopes[2], colour = "red")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(yintercept = 0, slope = eigen$slopes[1], colour = "green")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(yintercept = 2.5, slope = eigen$slopes[1], colour = "green")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6)
library(fpp3)
library(MASS)
library(ggfortify)
set.seed(42)
n <- 1000
mu <- c(0, 0) # mean set to 0 for PCA
Sigma <- matrix(c(4.33, 3.68, 3.68, 6.60), 2, 2)
x <- mvrnorm(n, mu, Sigma)
normal_data <- as.data.frame(x)
colnames(normal_data) <- c("X1", "X2")
eigen <- eigen(Sigma)
eigen$slopes[1] <- eigen$vectors[1,1]/eigen$vectors[2,1]  # calc slopes as ratios
eigen$slopes[2] <- eigen$vectors[1,1]/eigen$vectors[1,2]  # calc slopes as ratios
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6)
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "green") +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red")
eigen
library(fpp3)
library(MASS)
library(ggfortify)
set.seed(42)
n <- 1000
mu <- c(0, 0) # mean set to 0 for PCA
Sigma <- matrix(c(4.33, 3.68, 3.68, 6.60), 2, 2)
x <- mvrnorm(n, mu, Sigma)
normal_data <- as.data.frame(x)
colnames(normal_data) <- c("X1", "X2")
eigen <- eigen(Sigma)
eigen$slopes[1] <- eigen$vectors[1,1]/eigen$vectors[2,1]  # calc slopes as ratios
eigen$slopes[2] <- eigen$vectors[1,2]/eigen$vectors[2,2]  # calc slopes as ratios
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "green") +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "red") +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red")
pc <- prcomp(normal_data, center= TRUE, scale. = TRUE)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6)
summary(pc)
eigen
9.316055/(9.316055+1.61394)
x
eigen
trace(Sigma)
eigen$vectors[1,1]
eigen$vectors[2,1]
(5*sqrt(23729)+1093)/200)
(5*sqrt(23729)+1093)/200
(5*sqrt(23729)-1093)/200
(-5*sqrt(23729)+1093)/200
eigen
(-5*sqrt(23729)-227)/736
(5*sqrt(23729)-227)/736
eigen
eigen$slopes[1] <- eigen$vectors[2,1]/eigen$vectors[1,1]  # calc slopes as ratios
eigen$slopes[2] <- eigen$vectors[2,2]/eigen$vectors[1,2]  # calc slopes as ratios
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "red") +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red")
eigen$slopes[1] <- eigen$vectors[2,1]/eigen$vectors[1,1]  # calc slopes as ratios
eigen$slopes[2] <- eigen$vectors[2,2]/eigen$vectors[1,2]  # calc slopes as ratios
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "red") +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red")
eigen$slopes[1] * eigen$slopes[2]
eigen$slopes[1]
eigen$slopes[2]
1.354906*-0.7380584
ggplot(normal_data, aes(x = X1, y = X2),xlim=c(-10,10),ylim=c(-10,10)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "red") +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "red") +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red") + xlim(-10, 10) + ylim(-10, 10)
eigen
1.3549063 * -0.7380584
pc <- prcomp(normal_data, center= FALSE, scale. = FALSE)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6)
eigen
9.316055/(9.316055+1.613945)
windows(width = 5, height = 5)
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "red") +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red") + xlim(-10, 10) + ylim(-10, 10)
pc <- prcomp(normal_data, center= TRUE, scale. = TRUE)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6)
pc$sdev^2 / sum(pc$sdev^2)
pc
summary(pc)
library(fpp3)
library(MASS)
library(ggfortify)
set.seed(42)
n <- 1000
mu <- c(0, 0) # mean set to 0 for PCA
Sigma <- matrix(c(4.33, 3.68, 3.68, 6.60), 2, 2)
x <- mvrnorm(n, mu, Sigma)
normal_data <- as.data.frame(x)
colnames(normal_data) <- c("X1", "X2")
eigen <- eigen(Sigma)
eigen$slopes[1] <- eigen$vectors[2,1]/eigen$vectors[1,1]  # calc slopes as ratios
eigen$slopes[2] <- eigen$vectors[2,2]/eigen$vectors[1,2]  # calc slopes as ratios
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6)
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) + theme(axis.text=element_text(size=12) +
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) + theme(axis.text=element_text(size=15)
v
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) + theme(axis.text=element_text(size=15)
)
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) + theme(axis.title=element_text(size=15))
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) + theme(axis.title=element_text(size=15), face="bold")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) + theme(axis.text=element_text(size=12),axis.title=element_text(size=15,face="bold"))
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) + theme(axis.text=element_text(size=12),axis.title=element_text(size=15,face="bold"))
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) + theme(axis.text=element_text(size=12),axis.title=element_text(size=15,face="bold")) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "red") +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) + theme(axis.text=element_text(size=12),axis.title=element_text(size=15,face="bold")) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "red",size=1) +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red")
ggplot(normal_data, aes(x = X1, y = X2)) + geom_point(color = "blue", alpha = 0.6) + theme(axis.text=element_text(size=12),axis.title=element_text(size=15,face="bold")) +
geom_abline(intercept = 0, slope = eigen$slopes[1], colour = "red",size=1) +
geom_abline(intercept = 0, slope = eigen$slopes[2], colour = "red",size=1)
pc <- prcomp(normal_data, center= TRUE, scale. = TRUE)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6) +
geom_abline(intercept = 0, slope = 0, colour = "red",size=1) +
geom_abline(intercept = 0, colour = "red",size=1)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6) +
geom_hbline(intercept = 0, colour = "red",size=1) +
geom_vbline(intercept = 0, colour = "red",size=1)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6) +
geom_hline(intercept = 0, colour = "red",size=1) +
geom_vline(intercept = 0, colour = "red",size=1)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6) +
geom_hline(yintercept = 0, colour = "red",size=1) +
geom_vline(xintercept = 0, colour = "red",size=1)
autoplot(pc) + geom_point(color = "blue", alpha = 0.6) + theme(axis.text=element_text(size=12),axis.title=element_text(size=15,face="bold")) +
geom_hline(yintercept = 0, colour = "red",size=1) +
geom_vline(xintercept = 0, colour = "red",size=1)
summary(pc)
pc
grepl("22","G2222", fixed=TRUE)
grepl("G22","G2222", fixed=TRUE)
library(openxlsx)
library(dplyr)
setwd('C:\\Users\\rober\\Desktop\\Internship') # set working directory
samples_data = read.xlsx(xlsxFile = "data_lakes.xlsx", sheet = "counts")
length(samples_data$Sample)
c()
get_data = function(lake_code){
code_loc = c()
for(i in 1:length(samples_data$Sample)){
if(grepl(lake_code,samples_data$Sample[i], fixed=TRUE) == TRUE){
append(code_loc, i)
}
}
data_code = samples_data[code_loc,]
return(data_code)
}
get_data("G01")
samples_data[c(1,2,3,4,5),]
get_data = function(lake_code){
code_loc = c()
for(i in 1:length(samples_data$Sample)){
if(grepl(lake_code,samples_data$Sample[i], fixed=TRUE) == TRUE){
append(code_loc, i)
}
}
print(code_loc)
data_code = samples_data[code_loc,]
return(data_code)
}
get_data("G01")
get_data("G01")
grepl("G01",samples_data$Sample[1], fixed=TRUE)
get_data = function(lake_code){
code_loc = c()
for(i in 1:length(samples_data$Sample)){
print(samples_data$Sample[i])
if(grepl(lake_code,samples_data$Sample[i], fixed=TRUE) == TRUE){
append(code_loc, i)
}
}
print(code_loc)
data_code = samples_data[code_loc,]
return(data_code)
}
get_data("G01")
get_data = function(lake_code){
code_loc = c()
for(i in 1:length(samples_data$Sample)){
print(samples_data$Sample[i])
print(grepl(lake_code,samples_data$Sample[i], fixed=TRUE))
if(grepl(lake_code,samples_data$Sample[i], fixed=TRUE) == TRUE){
append(code_loc, i)
}
}
print(code_loc)
data_code = samples_data[code_loc,]
return(data_code)
}
get_data("G01")
get_data("G01")
get_data = function(lake_code){
code_loc = c()
for(i in 1:length(samples_data$Sample)){
print(grepl(lake_code,samples_data$Sample[i], fixed=TRUE))
if(grepl(lake_code,samples_data$Sample[i], fixed=TRUE) == TRUE){
append(code_loc, i)
}
}
print(code_loc)
data_code = samples_data[code_loc,]
return(data_code)
}
get_data("G01")
TRUE == TRUE
TRUE == FALSE
FALSE == TRUE
get_data = function(lake_code){
code_loc = c()
for(i in 1:length(samples_data$Sample)){
if(grepl(lake_code,samples_data$Sample[i], fixed=TRUE) == TRUE){
print("Hello")
append(code_loc, i)
}
}
print(code_loc)
data_code = samples_data[code_loc,]
return(data_code)
}
get_data("G01")
get_data = function(lake_code){
code_loc = c()
for(i in 1:length(samples_data$Sample)){
if(grepl(lake_code,samples_data$Sample[i], fixed=TRUE) == TRUE){
print("Hello")
append(code_loc, i)
print(code_loc)
}
}
print(code_loc)
data_code = samples_data[code_loc,]
return(data_code)
}
get_data("G01")
get_data = function(lake_code){
code_loc = c()
for(i in 1:length(samples_data$Sample)){
if(grepl(lake_code,samples_data$Sample[i], fixed=TRUE) == TRUE){
code_loc = append(code_loc, i)
}
}
data_code = samples_data[code_loc,]
return(data_code)
}
get_data("G01")
samples_data
"."+"cd"
paste(".","g")
paste(".",collapse="g")
paste(".","g",sep = '')
grepl(paste(".","19",sep = ''),data_code$Sample[1])
grepl(paste(".","19",sep = ''),samples_data$Sample[1])
samples_data$Sample[1]
grepl(paste(".","20",sep = ''),samples_data$Sample[1])
grepl(paste("...","20",sep = ''),samples_data$Sample[1])
grepl(paste("....","20",sep = ''),samples_data$Sample[1])
get_data = function(lake_code,year_code){
# LOCATION SELECTION
code_loc = c()
for(i in 1:length(samples_data$Sample)){
if(grepl(lake_code,samples_data$Sample[i]) == TRUE){
code_loc = append(code_loc, i)
}
}
data_code = samples_data[code_loc,]
# YEAR SELECTION
year_loc = c()
for(i in 1:length(data_code$Sample)){
if(grepl(paste("...",year_code,sep = ''),data_code$Sample[i]) == TRUE){
year_loc = append(year_loc, i)
}
}
data_code = data_code[year_loc,]
return(data_code)
}
get_data("G01","20")
get_data("G01","21")
get_data("G01","24")
c(1,2,3,4)[3]
c(1)[1]
1[1]
k = 1
k[0]
k[1]
gc()
library(openxlsx)
library(dplyr)
setwd('C:\\Users\\rober\\Desktop\\Internship') # set working directory
samples_data = read.xlsx(xlsxFile = "data_lakes.xlsx", sheet = "counts")
code_in_list = function(sample_code, list_codes, which_code){
in_list = FALSE
if(which_code == "LOC"){
for(i in 1:length(list_codes)){
if(grepl(list_codes[i],sample_code) == TRUE){
in_list = TRUE
break
}
}
}
else if( which_code == "YEAR"){
for(i in 1:length(list_codes)){
if(grepl(paste("...",list_codes[i],sep = ''),sample_code) == TRUE){
in_list = TRUE
break
}
}
}
return(in_list)
}
get_data = function(lake_codes,year_codes){
# LOCATION SELECTION
code_loc = c()
for(i in 1:length(samples_data$Sample)){
if( code_in_list(samples_data$Sample[i], lake_codes, "LOC") == TRUE){
code_loc = append(code_loc, i)
}
}
data_code = samples_data[code_loc,]
# YEAR SELECTION
year_loc = c()
for(i in 1:length(data_code$Sample)){
if( code_in_list(samples_data$Sample[i], year_codes, "YEAR") == TRUE){
year_loc = append(year_loc, i)
}
}
data_code = data_code[year_loc,]
return(data_code)
}
View(samples_data)
View(samples_data)
get_data("G01","20")
get_data("G01",c("20",21,23))
View(samples_data)
View(samples_data)
get_data(c("K19","K22"),c("20",21,23))
get_data(c("K19","K22"),c("20","21","23"))
get_data(c("K19","K22"),c("20","21","23"))$Sample
library(openxlsx)
setwd('C:\\Users\\rober\\Desktop\\Internship') # set working directory
samples_data = read.xlsx(xlsxFile = "data_lakes.xlsx", sheet = "counts")
code_in_list = function(sample_code, list_codes, which_code){
in_list = FALSE
if(which_code == "LOC"){
for(i in 1:length(list_codes)){
if(grepl(list_codes[i],sample_code) == TRUE){
in_list = TRUE
break
}
}
}
else if( which_code == "YEAR"){
for(i in 1:length(list_codes)){
if(grepl(paste("...",list_codes[i],sep = ''),sample_code) == TRUE){
in_list = TRUE
break
}
}
}
return(in_list)
}
get_data = function(lake_codes,year_codes){
# LOCATION SELECTION
code_loc = c()
for(i in 1:length(samples_data$Sample)){
if( code_in_list(samples_data$Sample[i], lake_codes, "LOC") == TRUE){
code_loc = append(code_loc, i)
}
}
data_code = samples_data[code_loc,]
# YEAR SELECTION
year_loc = c()
for(i in 1:length(data_code$Sample)){
if( code_in_list(data_code$Sample[i], year_codes, "YEAR") == TRUE){
year_loc = append(year_loc, i)
}
}
data_code = data_code[year_loc,]
return(data_code)
}
get_data(c("K19","K22"),c("20","21","23"))$Sample
library(openxlsx)
setwd('C:\\Users\\rober\\Desktop\\Internship') # set working directory
samples_data = read.xlsx(xlsxFile = "data_lakes.xlsx", sheet = "counts")
code_in_list = function(list_codes, sample_code, which_code){
# TODO: specify what the codes can be !!!!
# Description: This function checks if there is an element of list_codes
#              (a string) that is contained in the string sample_code
# Args:
#       list_codes: list of codes
#       sample_code: reference string for checking
#       which_code: "loc" if we are identifying the Lake.
#                   "year" if we are identifying the Year
# Return: TRUE if there is such element. FALSE otherwise
in_list = FALSE
if(which_code == "loc"){
for(i in 1:length(list_codes)){
# check if the i-th element is contained in the sample_code string.
# if yes then set in_list to TRUE and break as we only need one element
# to be in the sample_code
if( grepl(list_codes[i],sample_code) == TRUE){
in_list = TRUE
break
}
}
}
else if( which_code == "year"){
for(i in 1:length(list_codes)){
# same logic as the previous loop. We add three dots before the code
# because they are reserved for the location code
if(grepl(paste("...",list_codes[i],sep = ''),sample_code) == TRUE){
in_list = TRUE
break
}
}
}
return(in_list)
}
get_data(samples_data$Sample,"24")
get_data = function(lake_codes,year_codes){
# LOCATION SELECTION
code_loc = c()
for(i in 1:length(samples_data$Sample)){
if( code_in_list(lake_codes, samples_data$Sample[i], "loc") == TRUE){
code_loc = append(code_loc, i)
}
}
data_code = samples_data[code_loc,]
# YEAR SELECTION
year_loc = c()
for(i in 1:length(data_code$Sample)){
if( code_in_list(year_codes, data_code$Sample[i], "year") == TRUE){
year_loc = append(year_loc, i)
}
}
data_code = data_code[year_loc,]
return(data_code)
}
get_data(samples_data$Sample,"24")
View(samples_data)
library(openxlsx)
setwd('C:\\Users\\rober\\Desktop\\Internship') # set working directory
samples_data <- read.xlsx(xlsxFile = "data_lakes.xlsx", sheet = "counts")
location_data <- read.xlsx(xlsxFile = "data_lakes.xlsx", sheet = "locations")
